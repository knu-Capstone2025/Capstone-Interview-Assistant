@page "/"
@using InterviewAssistant.Common.Models
@using InterviewAssistant.Web.Services
@using InterviewAssistant.Web.Utilities
@using Markdig
@using Microsoft.JSInterop
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<PageTitle>면접 코치 - InterviewAssistant</PageTitle>

<!-- 모달 창 영역 -->
@if (showModal)
{
    <div class="modal show">
        <div class="modal-overlay" @onclick="CloseModal"></div>
        <div class="modal-container">
            <div class="modal-header">
                <h3>링크 공유</h3>
                <button class="close-btn" @onclick="CloseModal">×</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="resumeUrl">이력서 URL</label>
                    <input type="text" id="resumeUrl" @bind="resumeUrl" placeholder="이력서 URL을 입력하세요" />
                </div>
                <div class="form-group">
                    <label for="jobUrl">채용공고 URL</label>
                    <input type="text" id="jobUrl" @bind="jobUrl" placeholder="채용공고 URL을 입력하세요" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="cancel-btn" @onclick="CloseModal">취소</button>
                <button class="submit-btn" @onclick="SubmitLinks">확인</button>
            </div>
        </div>
    </div>
}

<!-- 메인 채팅 영역 -->
<div class="chat-main">
    <!-- 채팅 메시지 영역 -->
    <div class="chat-messages" id="chatMessages">
        @if (!isLinkShared)
        {
            <div class="welcome-message">
                <h2>면접 코치 봇에 오신 것을 환영합니다!</h2>
                <p>질문을 입력하시면 면접 준비를 도와드립니다.</p>
                <button class="share-btn" @onclick="() => showModal = true">
                    <i class="share-icon"></i>
                    이력서 및 채용공고 공유하기
                </button>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.Role == MessageRoleType.User ? "user-message" : "bot-message")">
                    <div class="message-content">
                        @((MarkupString)Markdown.ToHtml(message.Message).Trim())
                    </div>
                </div>
            }
        }
        @if (isLoading)
        {
            <div class="message bot-message">
                <div class="message-content">
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 입력 영역 -->
    <div class="chat-input-container">
        <div class="input-wrapper">
            <textarea 
                id="messageInput"
                @bind="userInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="메시지를 입력하세요." 
                rows="1"
                disabled="@(isLoading || !isLinkShared)"></textarea>
            <button class="send-btn" @onclick="SendMessage" disabled="@IsReadyToSendMessage()">
                <span class="send-icon">↵</span>
            </button>
        </div>
        @if (!isServerOutputEnded)
        {
            <div class="response-status">
                <small>서버 응답 출력 중... 출력이 완료될 때까지 기다려주세요.</small>
            </div>
        }
    </div>
</div>

@code {
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string userInput = string.Empty;
    private bool isLoading = false;
    // 링크 공유 여부
    private bool isLinkShared = false;
    private bool isServerOutputEnded = true;
    // 메시지 전송 중 여부
    private bool isSend = false;
    // 모달 관련 변수
    private bool showModal = false;
    private string resumeUrl = string.Empty;
    private string jobUrl = string.Empty;
    private void CloseModal() => showModal = false;
    private async Task SubmitLinks()
    {
        // URL 검증
        var (resumeIsValid, resumeError) = SecurityValidator.ValidateUrl(resumeUrl);
        var (jobIsValid, jobError) = SecurityValidator.ValidateUrl(jobUrl);
        if (!resumeIsValid)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"이력서 URL이 유효하지 않습니다: {resumeError}");
            return;
        }
        if (!jobIsValid)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"채용공고 URL이 유효하지 않습니다: {jobError}");
            return;
        }

        CloseModal();
        isLinkShared = true;

        // URL 정제
        var request = new InterviewDataRequest
        {
            //이후 GUID 생성
            ResumeUrl = resumeUrl,
            JobDescriptionUrl = jobUrl
        };

        isLoading = true;
        isServerOutputEnded = false;
        StateHasChanged();
        
        var assistantMessage = new ChatMessage 
        { 
            Role = MessageRoleType.Assistant, 
            Message = string.Empty 
        };

        var responses = ChatService.SendInterviewDataAsync(request);
        bool first = true;

        try
        {
            await foreach (var response in responses)
            {
                if (first)
                {
                    first = false;
                    messages.Add(assistantMessage);

                    isLoading = false;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("resetAutoScroll");
                    await JSRuntime.InvokeVoidAsync("forceScrollToBottom", "chatMessages");
                }
                assistantMessage.Message += response.Message;
                await ScrollToBottom();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Role = MessageRoleType.Assistant, Message = $"오류: {ex.Message}" });
        }
        finally
        {
            isServerOutputEnded = true;
            isLoading = false;
            StateHasChanged();
        }
    }

    // 키 입력 처리 (엔터키로 메시지 전송)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if(e.Repeat || isSend)
        {
            return;
        }
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            // 텍스트 영역의 실제 값을 JavaScript를 통해 가져옵니다
            var actualValue = await JSRuntime.InvokeAsync<string>("getTextAreaValue", "messageInput");

            // 실제 값이 비어있지 않은 경우에만 메시지를 보냅니다
            if (!string.IsNullOrWhiteSpace(actualValue))
            {
                // 실제 값으로 userInput을 갱신합니다
                userInput = actualValue.TrimEnd('\n', '\r');
                isSend = true;
                await SendMessage();
                isSend = false;
            }
        }
    }

    // 메시지 전송 - 서비스 사용
    private async Task SendMessage()
    {
        if (IsReadyToSendMessage())
        {
            return;
        }

        // 입력 검증
        var (isValid, errorMessage) = SecurityValidator.ValidateMessage(userInput);
        if (!isValid)
        {
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            return;
        }

        // 입력 정제
        var sanitizedInput = SecurityValidator.SanitizeMessage(userInput);
        var userMessage = new ChatMessage { Role = MessageRoleType.User, Message = sanitizedInput };
        messages.Add(userMessage);

        await JSRuntime.InvokeVoidAsync("resetAutoScroll");
        userInput = string.Empty;

        await ScrollToBottom();

        try
        {
            isLoading = true;
            isServerOutputEnded = false; // 서버 응답이 시작됨을 표시
            StateHasChanged();

            // ChatService를 통해 응답 가져오기
            var responses = ChatService.SendMessageAsync(messages);

            var assistantMessage = new ChatMessage { Role = MessageRoleType.Assistant, Message = string.Empty };
            messages.Add(assistantMessage);

            bool first = true;
            await foreach (var response in responses)
            {    
                if (first)
                {
                    isLoading = false;
                    first = false;
                    StateHasChanged(); // 첫 문자 등자 등장하면 로딩 끄고 UI 갱신

                    // 첫 응답 도착 시 무조건 맨 아래로 스크롤
                    await JSRuntime.InvokeVoidAsync("resetAutoScroll");
                    await JSRuntime.InvokeVoidAsync("forceScrollToBottom", "chatMessages");
                }
                
                // 점진적으로 메시지를 추가하면서 렌더링
                assistantMessage.Message += response.Message;
                await ScrollToBottom();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Role = MessageRoleType.Assistant, Message = $"오류: {ex.Message}" });
        }
        finally
        {
            isServerOutputEnded = true; // 서버 응답이 끝났음을 표시
            StateHasChanged();
            await ScrollToBottom();
            await JSRuntime.InvokeVoidAsync("resetTextAreaHeight", "messageInput");
            await JSRuntime.InvokeVoidAsync("focusTextArea", "messageInput");
        }
    }

    private bool IsReadyToSendMessage()
    {
        return string.IsNullOrWhiteSpace(userInput) || isLoading || !isServerOutputEnded;
    }

    // 채팅창 스크롤을 항상 최하단으로
    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // 렌더링 시간 고려
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    // 페이지로드시 자동으로 리사이징
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 처음 렌더링될 때만 설정
            await JSRuntime.InvokeVoidAsync("setupTextAreaResize", "messageInput");
            await JSRuntime.InvokeVoidAsync("setupAutoScrollDetection", "chatMessages");
            // await JSRuntime.InvokeVoidAsync("initScrollButton", "chatMessages");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}