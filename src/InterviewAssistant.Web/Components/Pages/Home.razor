<!-- Home.razor -->

@page "/"
@* @using InterviewAssistant.Common.Models *@
@using InterviewAssistant.Web.Services
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>면접 코치 - InterviewAssistant</PageTitle>

<!-- 메인 채팅 영역 -->
<div class="chat-main">
    <!-- 채팅 메시지 영역 -->
    <div class="chat-messages" id="chatMessages">
        @if (messages.Count == 0)
        {
            <div class="welcome-message">
                <h2>면접 코치 봇에 오신 것을 환영합니다!</h2>
                <p>이력서와 채용공고 링크를 공유하시면 맞춤형 면접 질문과 피드백을 제공해 드립니다.</p>
                <button class="link-share-btn" @onclick="ShowLinkInput">📎 링크 공유</button>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                    <div class="message-content">
                        @((MarkupString)message.Content)
                    </div>
                </div>
            }
        }
        @if (isLoading)
        {
            <div class="message bot-message">
                <div class="message-content">
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 입력 영역 -->
    <div class="chat-input-container">
        <div class="input-wrapper">
            <textarea 
                id="messageInput"
                @bind="userInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="메시지를 입력하세요." 
                rows="1"
                disabled="@(isLoading || !isLinksSubmitted)"></textarea>
            <button class="send-btn" @onclick="SendMessage" disabled="@(string.IsNullOrWhiteSpace(userInput) || isLoading || !isLinksSubmitted)">
                <span class="send-icon">↵</span>
            </button>
        </div>
    </div>
</div>

@if (showLinkInput)
{
    <div class="link-input-overlay">
        <div class="link-input-container @(showLinkInput ? "show" : "")">
            <h3>링크 공유</h3>
            <input type="text" placeholder="이력서 링크" @bind="resumeLink" />
            <input type="text" placeholder="채용공고 링크" @bind="jobPostingLink" />
            <button class="submit-btn" @onclick="SubmitLinks">올리기</button>
            <button class="cancel-btn" @onclick="CloseLinkInput">취소</button>
        </div>
    </div>
}

@code {
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string userInput = string.Empty;
    private bool isLoading = false;
    private bool showLinkInput = false;
    private bool isLinksSubmitted = false;
    private string resumeLink = string.Empty;
    private string jobPostingLink = string.Empty;
    private int questionIndex = 0;

    private readonly string[] questions = new[]
    {
        "면접 질문 #1: 자기소개를 해주세요.",
        "면접 질문 #2: 이력서에 적힌 프로젝트 중 가장 기억에 남는 프로젝트는 무엇인가요?",
        "면접 질문 #3: 이 회사에서 이루고 싶은 목표는 무엇인가요?"
    };

    private readonly string[] feedbacks = new[]
    {
        "피드백 #1: 자기소개를 잘 해주셨습니다. 다음 질문으로 넘어가겠습니다.",
        "피드백 #2: 프로젝트에 대한 설명이 좋았습니다. 다음 질문으로 넘어가겠습니다.",
        "피드백 #3: 목표에 대한 설명이 인상적입니다. 면접을 종료하겠습니다."
    };

    private void ShowLinkInput()
    {
        showLinkInput = true;
        StateHasChanged(); // UI 업데이트
    }

    private void CloseLinkInput()
    {
        showLinkInput = false;
        StateHasChanged(); // UI 업데이트
    }

    private async Task SubmitLinks()
    {
        if (!string.IsNullOrWhiteSpace(resumeLink) && !string.IsNullOrWhiteSpace(jobPostingLink))
        {
            isLoading = true;
            StateHasChanged(); // UI 업데이트

            await Task.Delay(3000); // 3초 대기

            isLinksSubmitted = true;
            Console.WriteLine($"이력서 링크: {resumeLink}");
            Console.WriteLine($"채용공고 링크: {jobPostingLink}");
            showLinkInput = false;
            isLoading = false;
            StateHasChanged(); // UI 업데이트

            // 첫 번째 질문 추가
            messages.Add(new ChatMessage { IsUser = false, Content = questions[questionIndex] });
            StateHasChanged();
        }
    }

    // 키 입력 처리 (엔터키로 메시지 전송)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    // 메시지 전송 - 서비스 사용
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading)
            return;

        var userMessage = new ChatMessage { IsUser = true, Content = userInput };
        messages.Add(userMessage);
        
        var currentInput = userInput;
        userInput = string.Empty;
        
        await ScrollToBottom();
        
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // 피드백 및 다음 질문 추가
            await Task.Delay(1000);
            messages.Add(new ChatMessage { IsUser = false, Content = feedbacks[questionIndex] });
            StateHasChanged();
            await Task.Delay(1000);

            questionIndex++;
            if (questionIndex < questions.Length)
            {
                messages.Add(new ChatMessage { IsUser = false, Content = questions[questionIndex] });
            }
            else
            {
                messages.Add(new ChatMessage { IsUser = false, Content = @"
                    <button class='result-btn' @onclick='ShowResult'>결과보기</button>
                    <button class='restart-btn' @onclick='RetryInterview'>재면접</button>
                " });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { IsUser = false, Content = $"오류: {ex.Message}" });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
            await JSRuntime.InvokeVoidAsync("focusTextArea", "messageInput");
        }
    }

    private void ShowResult()
    {
        // 결과보기 기능 구현 예정
    }

    private void RetryInterview()
    {
        messages.Clear();
        isLinksSubmitted = false;
        questionIndex = 0;
        StateHasChanged();
    }

    // 채팅창 스크롤을 항상 최하단으로
    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // 렌더링 시간 고려
        await JSRuntime.InvokeVoidAsync("scrollToBottomWithOffset", "chatMessages", 300);
    }

    // 페이지 로드 시 JS 함수 등록
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottomWithOffset = function(elementId, offset) {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight - offset;
                    }
                }

                window.focusTextArea = function(elementId) {
                    setTimeout(function() {
                        const element = document.getElementById(elementId);
                        if (element) {
                            element.focus();
                        }
                    }, 0);
              }
            ");
        }
    }

    // 채팅 메시지 클래스
    private class ChatMessage
    {
        public bool IsUser { get; set; }
        public string Content { get; set; } = string.Empty;
    }
}