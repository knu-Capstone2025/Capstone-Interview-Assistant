@page "/"
@using InterviewAssistant.Common.Models
@using InterviewAssistant.Web.Services
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>면접 코치 - InterviewAssistant</PageTitle>

<!-- 메인 채팅 영역 -->
<div class="chat-main">
    <!-- 채팅 메시지 영역 -->
    <div class="chat-messages" id="chatMessages">
        @if (messages.Count == 0)
        {
            <div class="welcome-message">
                <h2>면접 코치 봇에 오신 것을 환영합니다!</h2>
                <p>이력서와 채용공고 링크를 공유하시면 맞춤형 면접 질문과 피드백을 제공해 드립니다.</p>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                    <div class="message-content">
                        @((MarkupString)message.Content)
                    </div>
                </div>
            }
        }
        @if (isLoading)
        {
            <div class="message bot-message">
                <div class="message-content">
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 입력 영역 -->
    <div class="chat-input-container">
        @if (showLinkInput)
        {
            <div class="file-link-container">
                <div class="link-input-group">
                    <label>이력서 링크:</label>
                    <input type="text" @bind="resumeLink" placeholder="https://drive.google.com/file/d/..." />
                </div>
                <div class="link-input-group">
                    <label>채용공고 링크:</label>
                    <input type="text" @bind="jobDescLink" placeholder="https://drive.google.com/file/d/..." />
                </div>
                <div class="link-buttons">
                    <button @onclick="SubmitLinks" disabled="@(string.IsNullOrWhiteSpace(resumeLink) && string.IsNullOrWhiteSpace(jobDescLink))">제출</button>
                    <button @onclick="ToggleLinkInput">취소</button>
                </div>
            </div>
        }
        
        <div class="input-wrapper">
            <button class="attachment-btn" @onclick="ToggleLinkInput">
                <span class="attachment-icon">+</span>
            </button>
            <textarea 
                id="messageInput"
                @bind="userInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="메시지를 입력하세요." 
                rows="1"
                disabled="@isLoading"></textarea>
            <button class="send-btn" @onclick="SendMessage" disabled="@(string.IsNullOrWhiteSpace(userInput) || isLoading)">
                <span class="send-icon">↵</span>
            </button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string userInput = string.Empty;
    private bool isLoading = false;
    private bool showLinkInput = false;
    private string resumeLink = string.Empty;
    private string jobDescLink = string.Empty;
    
    // 링크 입력 UI 토글
    private void ToggleLinkInput()
    {
        showLinkInput = !showLinkInput;
    }

    // 키 입력 처리 (엔터키로 메시지 전송)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    // 대화 초기화 - 서비스 사용
    private async Task ResetChat()
    {
        try
        {
            isLoading = true;
            await ChatService.ResetChatAsync();
            messages.Clear();
            resumeLink = string.Empty;
            jobDescLink = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting chat: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // 메시지 전송 - 서비스 사용
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading)
            return;

        var userMessage = new ChatMessage { IsUser = true, Content = userInput };
        messages.Add(userMessage);
        
        var currentInput = userInput;
        userInput = string.Empty;
        
        await ScrollToBottom();
        
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var chatResponse = await ChatService.SendMessageAsync(currentInput);
            
            if (chatResponse != null)
            {
                messages.Add(new ChatMessage { IsUser = false, Content = chatResponse.Message });
            }
            else
            {
                messages.Add(new ChatMessage { IsUser = false, Content = "죄송합니다. 메시지 처리 중 오류가 발생했습니다." });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { IsUser = false, Content = $"오류: {ex.Message}" });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
            await JSRuntime.InvokeVoidAsync("focusTextArea", "messageInput");
        }
    }

    // 파일 링크 제출
    private async Task SubmitLinks()
    {
        if (string.IsNullOrWhiteSpace(resumeLink) && string.IsNullOrWhiteSpace(jobDescLink))
            return;

        var linkInfoMessage = "제출된 링크:";
        if (!string.IsNullOrWhiteSpace(resumeLink))
            linkInfoMessage += $"<br>📄 이력서: {resumeLink}";
        if (!string.IsNullOrWhiteSpace(jobDescLink))
            linkInfoMessage += $"<br>🔍 채용공고: {jobDescLink}";

        messages.Add(new ChatMessage { IsUser = true, Content = linkInfoMessage });
        
        // 봇에게 링크 정보 전달
        var message = $"다음 링크를 분석해주세요:";
        if (!string.IsNullOrWhiteSpace(resumeLink))
            message += $" 이력서 링크: {resumeLink}";
        if (!string.IsNullOrWhiteSpace(jobDescLink))
            message += $" 채용공고 링크: {jobDescLink}";
        
        userInput = message;
        await SendMessage();
        
        showLinkInput = false;
    }

    // 채팅창 스크롤을 항상 최하단으로
    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // 렌더링 시간 고려
        await JSRuntime.InvokeVoidAsync("scrollToBottomWithOffset", "chatMessages", 300);
    }

    // 페이지 로드 시 JS 함수 등록
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottomWithOffset = function(elementId, offset) {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight - offset;
                    }
                }

            window.focusTextArea = function(elementId) {
                setTimeout(function() {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.focus();
                    }
                }, 0);
            }
            ");
        }
    }

    // 채팅 메시지 클래스
    private class ChatMessage
    {
        public bool IsUser { get; set; }
        public string Content { get; set; } = string.Empty;
    }
}